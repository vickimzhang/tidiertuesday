trees %>%
gglot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point() +
labs()
library(tidyverse)
library(ggplot2)
trees %>%
gglot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point() +
labs()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point() +
labs()
trees <- sf_trees %>%
mutate(
# mutate so that `legal_status` is either "DPW Maintained" or "Other"
legal_status = case_when(
legal_status == "DPW Maintained" ~ legal_status,
TRUE ~ "Other"
),
# parse the `plot_size` to a number
plot_size = parse_number(plot_size)
) %>%
# remove address
select(-address) %>%
# remove NAs
na.omit() %>%
# character to factor
mutate_if(is.character, factor)
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point() +
labs()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point() +
labs() +
theme_classic
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point() +
labs() +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point() +
labs(colour = NULL) +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point() +
labs() +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point() +
labs() +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point() +
labs(color = NULL) +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point(size = 0.35) +
labs(color = NULL) +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point(size = 0.5) +
labs(color = NULL) +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point(size = 0.5, alpha = 0.5) +
labs(color = NULL) +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point(size = 1, alpha = 0.5) +
labs(color = NULL) +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point(size = 1, alpha = 0.05) +
labs(color = NULL) +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point(size = 1, alpha = 0.4) +
labs(color = NULL) +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point(size = 0.5, alpha = 0.4) +
labs(color = NULL) +
theme_classic()
trees
trees %>%
count(legal_status, caretaker)
?add_count
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
tally()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker, legal_status) %>%
tally()
trees %>%
count(legal_status, caretaker) %>%
tally()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker, legal_status) %>%
add_tally()
trees %>%
# create contingency table of `caretaker` and `legal_status`
count(legal_status, caretaker) %>%
# add the weighted count of each caretaker as a column named `caretaker_count`
add_count(caretaker, name = "caretaker_count")
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker, legal_status) %>%
add_tally(wt = n )
trees %>%
count(legal_status, caretaker) %>%
add_count(caretaker)
trees %>%
count(legal_status, caretaker) %>%
add_count(caretaker, wt = n)
trees %>%
# create contingency table of `caretaker` and `legal_status`
count(legal_status, caretaker) %>%
# add the weighted count of each caretaker as a column named `caretaker_count`
add_count(caretaker, wt = n, name = "caretaker_count")
trees %>%
count(legal_status, caretaker) %>%
add_count(caretaker)
trees %>%
count(legal_status, caretaker)
?add_count
trees
trees
trees %>%
count(legal_status, caretaker)
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker)
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
add_tally()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker)
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
add_tally()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
add_tally()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker)
trees
trees %>%
group_by(caretaker)
trees %>%
group_by(caretaker) %>%
summarize()
trees %>%
group_by(caretaker) %>%
count()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker)
trees %>%
count(legal_status, caretaker)
trees %>%
# create contingency table of `caretaker` and `legal_status`
count(legal_status, caretaker) %>%
# add the weighted count of each caretaker as a column named `caretaker_count`
add_tally(caretaker, wt = n, name = "caretaker_count")
trees %>%
add_tally()
trees %>%
count(legal_status, caretaker) %>%
add_tally()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
add_tally()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
add_count()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
count()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
tally()
trees %>%
count(legal_status, caretaker) %>%
tally()
trees %>%
count(legal_status, caretaker) %>%
count()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
count()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
tally()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
add_tally()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
add_count()
trees %>%
count(legal_status, caretaker) %>%
group_by(caretaker) %>%
add_count(wt= n)
trees %>%
# create contingency table of `caretaker` and `legal_status`
count(legal_status, caretaker) %>%
# add the weighted count of each caretaker as a column named `caretaker_count`
add_count(caretaker, wt = n, name = "caretaker_count") %>%
# filter by cases with caretaker > 50
filter(caretaker_count > 50) %>%
group_by(legal_status)
trees %>%
# create contingency table of `caretaker` and `legal_status`
count(legal_status, caretaker) %>%
# add the weighted count of each caretaker as a column named `caretaker_count`
add_count(caretaker, wt = n, name = "caretaker_count") %>%
# filter by cases with caretaker > 50
filter(caretaker_count > 50) %>%
group_by(legal_status) %>%
mutate(percent_legal = n / sum(n))
trees %>%
# create contingency table of `caretaker` and `legal_status`
count(legal_status, caretaker) %>%
# add the weighted count of each caretaker as a column named `caretaker_count`
add_count(caretaker, wt = n, name = "caretaker_count") %>%
# filter by cases with caretaker > 50
filter(caretaker_count > 50) %>%
# calculate percentage of caretakers for each `legal_status`
group_by(legal_status) %>%
mutate(percent_legal = n / sum(n)) %>%
# create bar graph
ggplot(aes(x = percent_legal, y = caretaker, fill = legal_status)) +
geom_col(position = "dodge")
trees %>%
# create contingency table of `caretaker` and `legal_status`
count(legal_status, caretaker) %>%
# add the weighted count of each caretaker as a column named `caretaker_count`
add_count(caretaker, wt = n, name = "caretaker_count") %>%
# filter by cases with caretaker > 50
filter(caretaker_count > 50) %>%
# calculate percentage of caretakers for each `legal_status`
group_by(legal_status) %>%
mutate(percent_legal = n / sum(n)) %>%
# create bar graph
ggplot(aes(x = percent_legal, y = caretaker, fill = legal_status)) +
geom_col(position = "dodge") +
theme_classic()
trees %>%
# create contingency table of `caretaker` and `legal_status`
count(legal_status, caretaker) %>%
# add the weighted count of each caretaker as a column named `caretaker_count`
add_count(caretaker, wt = n, name = "caretaker_count") %>%
# filter by cases with caretaker > 50
filter(caretaker_count > 50) %>%
# calculate percentage of caretakers for each `legal_status`
group_by(legal_status) %>%
mutate(percent_legal = n / sum(n)) %>%
# create bar graph
ggplot(aes(x = percent_legal, y = caretaker, fill = legal_status)) +
geom_col(position = "dodge") +
labs(fill = NULL,
x = "% of trees grouped by legal status")
theme_classic()
trees %>%
# create contingency table of `caretaker` and `legal_status`
count(legal_status, caretaker) %>%
# add the weighted count of each caretaker as a column named `caretaker_count`
add_count(caretaker, wt = n, name = "caretaker_count") %>%
# filter by cases with caretaker > 50
filter(caretaker_count > 50) %>%
# calculate percentage of caretakers for each `legal_status`
group_by(legal_status) %>%
mutate(percent_legal = n / sum(n)) %>%
# create bar graph
ggplot(aes(x = percent_legal, y = caretaker, fill = legal_status)) +
geom_col(position = "dodge") +
labs(fill = NULL,
x = "% of trees grouped by legal status") +
theme_classic()
trees %>%
ggplot(aes(x = longitude, y = latitude, colour = legal_status)) +
geom_point(size = 0.5, alpha = 0.4) +
labs(colour = NULL) + # remove colour legend title
theme_classic()
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(tidyverse)
library(tidymodels)
?initial split
?initial_split
trees_split
trees_split <- initial_split(trees_df, strata = legal_status)
trees_split <- initial_split(trees, strata = legal_status)
trees_split
str(trees_split)
training(trees_split)
?training
set.seed(1)
trees_split <- initial_split(trees, strata = legal_status)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
?recipe
?update_role
recipe(legal_status ~ ., data = trees_train) %>%
summary()
step_other
?step_other
?step_dummy
?step_date
?step_dummy
?step_downsample
# tree_rec
tree_rec <-
# recipe
recipe(legal_status ~ ., data = trees_train) %>%
# alter role of `tree_id` as an "ID" instead of "predictor"
update_role(tree_id, new_role = "ID") %>%
# collapse categorical levels
step_other(species, caretaker, threshold = 0.01) %>%
step_other(site_info, threshold = 0.005) %>%
# new variable for year
step_dummy(all_nomimal(), -all_outcomes()) %>%
step_date(date, features = c("year")) %>%
step_rm(date) %>%
# downsample
step_downsample(legal_status)
?prep
tree_rec
tree_prep <- prep(tree_rec)
tree_rec <-
# recipe
recipe(legal_status ~ ., data = trees_train) %>%
# alter role of `tree_id` as an "ID" instead of "predictor"
update_role(tree_id, new_role = "ID") %>%
# collapse categorical levels
step_other(species, caretaker, threshold = 0.01) %>%
step_other(site_info, threshold = 0.005) %>%
# new variable for year
step_dummy(all_nominal(), -all_outcomes()) %>%
step_date(date, features = c("year")) %>%
step_rm(date) %>%
# downsample
step_downsample(legal_status)
tree_rec
tree_prep <- prep(tree_rec)
tree_prep
tree_prep
tree_rec
?juice
juiced <- juice(tree_prep)
?rand_forest
?set_mode
?set_engine
?set_engine
tune_spec <- rand_forest(
# number of predictors that will be randomly sampled
mtry = tune(),
# number of trees
trees = 1000,
# minimum number of data points
min_n = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
trees_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
trees_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
?workflow
tree_rec <-
# recipe
recipe(legal_status ~ ., data = trees_train) %>%
# alter role of `tree_id` as an "ID" instead of "predictor"
update_role(tree_id, new_role = "ID") %>%
# collapse categorical levels
step_other(species, caretaker, threshold = 0.01) %>%
step_other(site_info, threshold = 0.005) %>%
# new variable for year
step_dummy(all_nominal(), -all_outcomes()) %>%
step_date(date, features = c("year")) %>%
step_rm(date) %>%
# downsample
step_downsample(legal_status)
trees_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
tune_spec <- rand_forest(
# number of predictors that will be randomly sampled
mtry = tune(),
# number of trees
trees = 1000,
# minimum number of data points
min_n = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
tree_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
tree_wf <- workflow()
tree_wf <- add_recipe(tree_rec)
tree_wf <- add_recipe(recipe = tree_rec)
library(hardhat)
install.packages("hardhat")
install.packages("hardhat")
install.packages("hardhat")
install.packages("hardhat")
install.packages("hardhat")
install.packages("hardhat")
install.packages("hardhat")
install.packages("hardhat")
library(hardhat)
install.packages(tidymodels)
install.packages("tidymodels")
library(tidymodels)
install.packages("hardhat")
install.packages("hardhat")
library(hardhat)
devtools::install_github("tidymodels/hardhat")
install.packages("Rtools")
devtools::install_github("tidymodels/hardhat")
remove.packages("glue")
library(glue)
tree_wf
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
tree_wf <- workflow()
library(tidymodels)
library(recipes)
tree_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
tree_wf <- workflow()
tree_wf <- add_recipes(tree_rec)
?add_recipes
install.packages("glue")
library(glue)
install.packages("glue")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
tree_wf <- add_recipes(tree_rec)
?add_recipes
??add_recipes
library(workflow)
install.packages("workflow")
install.packages("workflow")
install.packages("workflows")
library(workflows)
tree_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
tree_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
library(tidyverse)
library(tidymodels)
library(workflows)
tree_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
library(hardhat)
library(workflows)
tree_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
install.packages("hardhat")
install.packages("hardhat")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
tree_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
tree_wf <- add_recipe(tree_rec)
